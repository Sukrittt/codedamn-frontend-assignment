// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  expires      DateTime

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Gender {
  male
  female
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  bio           String?
  location      String?
  about         String?
  lookingForJob Boolean   @default(false)
  profession    String?
  dateOfBirth   DateTime?
  gender        Gender?
  emailVerified DateTime?
  onBoarding    Boolean   @default(false)

  coverImage String?
  image      String?

  showXP                    Boolean @default(true)
  showFollowersAndFollowing Boolean @default(true)
  showAchievementBadges     Boolean @default(true)

  githubUrl    String?
  linkedInUrl  String?
  facebookUrl  String?
  instagramUrl String?
  dribbbleUrl  String?
  behanceUrl   String?

  techSkills String[]
  interests  String[]
  languages  String[]

  accounts Account[]
  sessions Session[]

  projects     Projects[]
  certificates Certificates[]
  experience   Experiences[]
  education    Educations[]

  createdAt DateTime @default(now())
}

model Projects {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  image  String
  title  String
  skills String[]
  link   String

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Certificates {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  title          String
  issuedOn       DateTime
  credentialLink String

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Experiences {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  title       String
  location    String
  company     String
  description String?

  startDate DateTime
  endDate   DateTime?

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Educations {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  schoolName  String
  location    String
  description String?
  degree      String?

  startDate DateTime
  endDate   DateTime?

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}
